import { Component, forwardRef, OnDestroy } from '@angular/core';
import { AbstractControl, ControlValueAccessor, FormBuilder, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator, Validators } from '@angular/forms';
import { <%= classify(featureName)%> } from './<%= dasherize(featureName)%>.interface';
import { SubSink } from 'subsink';

@Component({
  selector: '<%= selector%>',
  templateUrl: './<%= dasherize(featureName)%>.component.html',
  styleUrls: ['./<%= dasherize(featureName)%>.component.scss'],
  providers: [{
    provide: NG_VALUE_ACCESSOR,
    useExisting: <%= componentName%>,
    multi: true
  },
  {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => <%= componentName%>),
    multi: true
  }]
})
export class <%= componentName%> implements ControlValueAccessor, Validator, OnDestroy {
  private subs = new SubSink();

  public formPart: FormGroup = this.fb.group({
    name: ['MyName', Validators.required]
  });

  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onTouched: () => void = () => { };

  // eslint-disable-next-line @typescript-eslint/no-empty-function
  constructor(private fb: FormBuilder) { }

  writeValue(value: <%= classify(featureName)%>): void {
    this.formPart.setValue(value, { emitEvent: false });
  }

  registerOnChange(fn: any): void {
    this.subs.sink = this.formPart.valueChanges.subscribe(value => fn(value));
  }

  registerOnTouched(fn: any): void {
    this.onTouched = fn;
  }

  setDisabledState?(isDisabled: boolean): void {
    // throw new Error('Method not implemented.');
  }

  validate(c: AbstractControl): ValidationErrors | null {
    return this.formPart.valid ? null : { invalidForm: { valid: false, message: "Form fields are invalid" } };
  }

  ngOnDestroy(): void {
    this.subs.unsubscribe();
  }

}
